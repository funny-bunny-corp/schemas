{
  "tableName": "fraud_detection_risk_decision_rejected",
  "tableType": "REALTIME",
  "segmentsConfig": {
    "timeColumnName": "event_timestamp",
    "timeType": "MILLISECONDS",
    "schemaName": "fraud_detection_risk_decision_rejected",
    "replicasPerPartition": "1"
  },
  "tenants": {},
  "tableIndexConfig": {
    "loadMode": "MMAP"
  },
  "metadata": {
    "customConfigs": {}
  },
  "ingestionConfig": {
    "streamIngestionConfig": {
      "streamConfigMaps": [
        {
          "realtime.segment.flush.threshold.rows": "0",
          "stream.kafka.decoder.prop.format": "JSON",
          "key.serializer": "org.apache.kafka.common.serialization.ByteArraySerializer",
          "stream.kafka.decoder.class.name": "org.apache.pinot.plugin.stream.kafka.KafkaJSONMessageDecoder",
          "streamType": "kafka",
          "value.serializer": "org.apache.kafka.common.serialization.ByteArraySerializer",
          "stream.kafka.consumer.type": "LOWLEVEL",
          "realtime.segment.flush.threshold.segment.rows": "50000",
          "stream.kafka.broker.list": "kafka:29092",
          "realtime.segment.flush.threshold.time": "3600000",
          "stream.kafka.consumer.factory.class.name": "org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory",
          "stream.kafka.consumer.prop.auto.offset.reset": "smallest",
          "stream.kafka.topic.name": "funny-bunny.xyz.risk-management.v1.risk.decision.rejected-sink"
        }
      ]
    },
    "transformConfigs": [
      {
        "columnName": "transaction_order_id",
        "transformFunction": "jsonPathString(transaction, '$.order.id')"
      },
      {
        "columnName": "buyer_document",
        "transformFunction": "jsonPathString(transaction, '$.participants.buyer.document')"
      },
      {
        "columnName": "buyer_name",
        "transformFunction": "jsonPathString(transaction, '$.participants.buyer.name')"
      },
      {
        "columnName": "seller_id",
        "transformFunction": "jsonPathString(transaction, '$.participants.seller.sellerId')"
      },
      {
        "columnName": "payment_id",
        "transformFunction": "jsonPathString(transaction, '$.payment.id')"
      },
      {
        "columnName": "payment_amount",
        "transformFunction": "jsonPathDouble(transaction, '$.payment.amount')"
      },
      {
        "columnName": "payment_currency",
        "transformFunction": "jsonPathString(transaction, '$.payment.currency')"
      },
      {
        "columnName": "payment_status",
        "transformFunction": "jsonPathString(transaction, '$.payment.status')"
      },
      {
        "columnName": "card_info",
        "transformFunction": "jsonPathString(transaction, '$.order.paymentType.cardInfo')"
      },
      {
        "columnName": "card_token",
        "transformFunction": "jsonPathString(transaction, '$.order.paymentType.token')"
      },
      {
        "columnName": "status_decision",
        "transformFunction": "jsonPathString(status, '$')"
      },
      {
        "columnName": "event_timestamp",
        "transformFunction": "jsonPathLong(at, '$')"
      },
      {
        "columnName": "level_name",
        "transformFunction": "jsonPathString(level, '$.name')"
      },
      {
        "columnName": "level_from",
        "transformFunction": "jsonPathDouble(level, '$.from')"
      },
      {
        "columnName": "level_to",
        "transformFunction": "jsonPathDouble(level, '$.to')"
      }
    ],
    "continueOnError": true,
    "rowTimeValueCheck": true,
    "segmentTimeValueCheck": false
  },
  "isDimTable": false
}
